{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Price from './price';\nexport default function HotelRoomPicker(props) {\n  _s();\n  const [bestRoom, setBestRoom] = useState(null);\n  const [roomData, setRoomData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:8080/nomers').then(res => res.json()).then(data => {\n      setRoomData(data);\n    }).catch(err => console.error(err));\n  }, []);\n  useEffect(() => {\n    // Перевірка, чи дані про номери готелю завантажені\n    if (roomData.length > 0) {\n      // Запуск генетичного алгоритму\n      const currentGuest = props.guest === 0 ? 1 : props.guest;\n      const bestRoom = geneticAlgorithm(roomData, 50, 50, currentGuest);\n      setBestRoom(bestRoom);\n    }\n  }, [roomData, props.guest]);\n\n  // Функція придатності (fitness function)\n  const calculateFitness = room => {\n    return room['number of seats'];\n  };\n\n  // Генетичний алгоритм для пошуку найкращого номера\n  const geneticAlgorithm = (roomData, populationSize, generations, guest) => {\n    let bestRoom = null;\n    let bestFitness = guest;\n    console.log(bestFitness);\n    // Повторення для кожного покоління\n    for (let gen = 0; gen < generations; gen++) {\n      // Випадково обираємо номери з поточної популяції та обчислюємо їх придатність\n      for (let i = 0; i < populationSize; i++) {\n        const randomRoom = roomData[Math.floor(Math.random() * roomData.length)];\n        const fitness = calculateFitness(randomRoom);\n        if (fitness === bestFitness) {\n          bestFitness = fitness;\n          bestRoom = randomRoom;\n        }\n      }\n    }\n    return bestRoom;\n  };\n\n  // Функція для зміни номера по натисканню кнопки\n  const changeRoom = () => {\n    const currentGuest = props.guest === 0 ? 1 : props.guest;\n    const newRoom = geneticAlgorithm(roomData, 50, 5, currentGuest);\n    setBestRoom(newRoom);\n  };\n  return {\n    roomData\n  };\n}\n_s(HotelRoomPicker, \"azhx3fXwxbF7YYpqbPa1vH7/zIU=\");\n_c = HotelRoomPicker;\nvar _c;\n$RefreshReg$(_c, \"HotelRoomPicker\");","map":{"version":3,"names":["React","useState","useEffect","Price","HotelRoomPicker","props","_s","bestRoom","setBestRoom","roomData","setRoomData","fetch","then","res","json","data","catch","err","console","error","length","currentGuest","guest","geneticAlgorithm","calculateFitness","room","populationSize","generations","bestFitness","log","gen","i","randomRoom","Math","floor","random","fitness","changeRoom","newRoom","_c","$RefreshReg$"],"sources":["D:/project/frontend/src/components/alg.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Price from './price'\r\n\r\nexport default function HotelRoomPicker(props) {\r\n\tconst [bestRoom, setBestRoom] = useState(null)\r\n\tconst [roomData, setRoomData] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\t\tfetch('http://localhost:8080/nomers')\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tsetRoomData(data)\r\n\t\t\t})\r\n\t\t\t.catch(err => console.error(err))\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\t// Перевірка, чи дані про номери готелю завантажені\r\n\t\tif (roomData.length > 0) {\r\n\t\t\t// Запуск генетичного алгоритму\r\n\t\t\tconst currentGuest = props.guest === 0 ? 1 : props.guest\r\n\t\t\tconst bestRoom = geneticAlgorithm(roomData, 50, 50, currentGuest)\r\n\t\t\tsetBestRoom(bestRoom)\r\n\t\t}\r\n\t}, [roomData, props.guest])\r\n\r\n\t// Функція придатності (fitness function)\r\n\tconst calculateFitness = room => {\r\n\t\treturn room['number of seats']\r\n\t}\r\n\r\n\t// Генетичний алгоритм для пошуку найкращого номера\r\n\tconst geneticAlgorithm = (roomData, populationSize, generations, guest) => {\r\n\t\tlet bestRoom = null\r\n\t\tlet bestFitness = guest\r\n\t\tconsole.log(bestFitness)\r\n\t\t// Повторення для кожного покоління\r\n\t\tfor (let gen = 0; gen < generations; gen++) {\r\n\t\t\t// Випадково обираємо номери з поточної популяції та обчислюємо їх придатність\r\n\t\t\tfor (let i = 0; i < populationSize; i++) {\r\n\t\t\t\tconst randomRoom = roomData[Math.floor(Math.random() * roomData.length)]\r\n\t\t\t\tconst fitness = calculateFitness(randomRoom)\r\n\t\t\t\tif (fitness === bestFitness) {\r\n\t\t\t\t\tbestFitness = fitness\r\n\t\t\t\t\tbestRoom = randomRoom\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bestRoom\r\n\t}\r\n\r\n\t// Функція для зміни номера по натисканню кнопки\r\n\tconst changeRoom = () => {\r\n\t\tconst currentGuest = props.guest === 0 ? 1 : props.guest\r\n\t\tconst newRoom = geneticAlgorithm(roomData, 50, 5, currentGuest)\r\n\t\tsetBestRoom(newRoom)\r\n\t}\r\n\r\n\treturn { roomData }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,SAAS;AAE3B,eAAe,SAASC,eAAeA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACfS,KAAK,CAAC,8BAA8B,CAAC,CACnCC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACbL,WAAW,CAACK,IAAI,CAAC;IAClB,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAENf,SAAS,CAAC,MAAM;IACf;IACA,IAAIO,QAAQ,CAACW,MAAM,GAAG,CAAC,EAAE;MACxB;MACA,MAAMC,YAAY,GAAGhB,KAAK,CAACiB,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGjB,KAAK,CAACiB,KAAK;MACxD,MAAMf,QAAQ,GAAGgB,gBAAgB,CAACd,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAEY,YAAY,CAAC;MACjEb,WAAW,CAACD,QAAQ,CAAC;IACtB;EACD,CAAC,EAAE,CAACE,QAAQ,EAAEJ,KAAK,CAACiB,KAAK,CAAC,CAAC;;EAE3B;EACA,MAAME,gBAAgB,GAAGC,IAAI,IAAI;IAChC,OAAOA,IAAI,CAAC,iBAAiB,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMF,gBAAgB,GAAGA,CAACd,QAAQ,EAAEiB,cAAc,EAAEC,WAAW,EAAEL,KAAK,KAAK;IAC1E,IAAIf,QAAQ,GAAG,IAAI;IACnB,IAAIqB,WAAW,GAAGN,KAAK;IACvBJ,OAAO,CAACW,GAAG,CAACD,WAAW,CAAC;IACxB;IACA,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,WAAW,EAAEG,GAAG,EAAE,EAAE;MAC3C;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,EAAEK,CAAC,EAAE,EAAE;QACxC,MAAMC,UAAU,GAAGvB,QAAQ,CAACwB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG1B,QAAQ,CAACW,MAAM,CAAC,CAAC;QACxE,MAAMgB,OAAO,GAAGZ,gBAAgB,CAACQ,UAAU,CAAC;QAC5C,IAAII,OAAO,KAAKR,WAAW,EAAE;UAC5BA,WAAW,GAAGQ,OAAO;UACrB7B,QAAQ,GAAGyB,UAAU;QACtB;MACD;IACD;IACA,OAAOzB,QAAQ;EAChB,CAAC;;EAED;EACA,MAAM8B,UAAU,GAAGA,CAAA,KAAM;IACxB,MAAMhB,YAAY,GAAGhB,KAAK,CAACiB,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGjB,KAAK,CAACiB,KAAK;IACxD,MAAMgB,OAAO,GAAGf,gBAAgB,CAACd,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAEY,YAAY,CAAC;IAC/Db,WAAW,CAAC8B,OAAO,CAAC;EACrB,CAAC;EAED,OAAO;IAAE7B;EAAS,CAAC;AACpB;AAACH,EAAA,CAxDuBF,eAAe;AAAAmC,EAAA,GAAfnC,eAAe;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}