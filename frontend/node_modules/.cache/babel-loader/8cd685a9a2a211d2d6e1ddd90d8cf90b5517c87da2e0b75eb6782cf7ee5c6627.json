{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\frontend\\\\src\\\\components\\\\alg.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Price from './price';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HotelRoomPicker = props => {\n  _s();\n  const [bestRoom, setBestRoom] = useState(null);\n  const [roomData, setRoomData] = useState([]);\n  useEffect(() => {\n    // Отримання даних про номери готелю\n    fetch('http://localhost:8080/nomers').then(res => res.json()).then(data => {\n      setRoomData(data);\n    }).catch(err => console.error(err));\n  }, []);\n  useEffect(() => {\n    // Перевірка, чи дані про номери готелю завантажені\n    if (roomData.length > 0) {\n      // Запуск генетичного алгоритму\n      const bestRoom = geneticAlgorithm(roomData, 50, 3);\n      setBestRoom(bestRoom);\n    }\n  }, [roomData]);\n\n  // Функція придатності (fitness function)\n  const calculateFitness = room => {\n    return room['number of seats'] / room.price;\n  };\n\n  // Функція мутації\n  const mutate = room => {\n    const mutatedRoom = {\n      ...room\n    };\n    // Зміна ціни з ймовірністю 10%\n    if (Math.random() < 0.1) {\n      mutatedRoom.price *= Math.random() < 0.5 ? 0.9 : 1.1; // Зменшення або збільшення на 10%\n    }\n    // Зміна кількості місць з ймовірністю 10%\n    if (Math.random() < 0.1) {\n      mutatedRoom['number of seats'] += Math.random() < 0.5 ? -1 : 1; // Зменшення або збільшення на 1\n    }\n    return mutatedRoom;\n  };\n\n  // Генетичний алгоритм для пошуку найкращого номера\n  const geneticAlgorithm = (roomData, populationSize, generations) => {\n    let bestRoom = null;\n    let bestFitness = -Infinity;\n\n    // Повторення для кожного покоління\n    for (let gen = 0; gen < generations; gen++) {\n      // Випадково обираємо номери з поточної популяції та обчислюємо їх придатність\n      for (let i = 0; i < populationSize; i++) {\n        const randomRoom = roomData[Math.floor(Math.random() * roomData.length)];\n        const fitness = calculateFitness(randomRoom);\n        if (fitness > bestFitness) {\n          bestFitness = fitness;\n          bestRoom = randomRoom;\n        }\n      }\n    }\n    return bestRoom;\n  };\n\n  // Функція для зміни номера по натисканню кнопки\n  const changeRoom = () => {\n    const newRoom = geneticAlgorithm(roomData, 50, 3);\n    setBestRoom(newRoom);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u041D\\u0430\\u0439\\u0434\\u0435\\u0448\\u0435\\u0432\\u0448\\u0438\\u0439 \\u0442\\u0430 \\u043D\\u0430\\u0439\\u0431\\u0456\\u043B\\u044C\\u0448 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u0440\\u0438\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: changeRoom,\n      children: \"\\u0417\\u043C\\u0456\\u043D\\u0438\\u0442\\u0438 \\u043D\\u043E\\u043C\\u0435\\u0440\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this), bestRoom && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: '/img/' + bestRoom['file photo'],\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041D\\u0430\\u0437\\u0432\\u0430: \", bestRoom['nomers name'], \" \", bestRoom.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0426\\u0456\\u043D\\u0430:\", ' ', /*#__PURE__*/_jsxDEV(Price, {\n          departureDate: props.departureDate,\n          arrivalDate: props.arrivalDate,\n          guest: props.guest\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041A\\u0456\\u043B\\u044C\\u043A\\u0456\\u0441\\u0442\\u044C \\u043C\\u0456\\u0441\\u0446\\u044C: \", bestRoom['number of seats']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 3\n  }, this);\n};\n_s(HotelRoomPicker, \"azhx3fXwxbF7YYpqbPa1vH7/zIU=\");\n_c = HotelRoomPicker;\nexport default HotelRoomPicker;\nvar _c;\n$RefreshReg$(_c, \"HotelRoomPicker\");","map":{"version":3,"names":["React","useState","useEffect","Price","jsxDEV","_jsxDEV","HotelRoomPicker","props","_s","bestRoom","setBestRoom","roomData","setRoomData","fetch","then","res","json","data","catch","err","console","error","length","geneticAlgorithm","calculateFitness","room","price","mutate","mutatedRoom","Math","random","populationSize","generations","bestFitness","Infinity","gen","i","randomRoom","floor","fitness","changeRoom","newRoom","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","src","alt","id","departureDate","arrivalDate","guest","_c","$RefreshReg$"],"sources":["D:/project/frontend/src/components/alg.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Price from './price'\r\n\r\nconst HotelRoomPicker = props => {\r\n\tconst [bestRoom, setBestRoom] = useState(null)\r\n\tconst [roomData, setRoomData] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\t\t// Отримання даних про номери готелю\r\n\t\tfetch('http://localhost:8080/nomers')\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tsetRoomData(data)\r\n\t\t\t})\r\n\t\t\t.catch(err => console.error(err))\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\t// Перевірка, чи дані про номери готелю завантажені\r\n\t\tif (roomData.length > 0) {\r\n\t\t\t// Запуск генетичного алгоритму\r\n\t\t\tconst bestRoom = geneticAlgorithm(roomData, 50, 3)\r\n\t\t\tsetBestRoom(bestRoom)\r\n\t\t}\r\n\t}, [roomData])\r\n\r\n\t// Функція придатності (fitness function)\r\n\tconst calculateFitness = room => {\r\n\t\treturn room['number of seats'] / room.price\r\n\t}\r\n\r\n\t// Функція мутації\r\n\tconst mutate = room => {\r\n\t\tconst mutatedRoom = { ...room }\r\n\t\t// Зміна ціни з ймовірністю 10%\r\n\t\tif (Math.random() < 0.1) {\r\n\t\t\tmutatedRoom.price *= Math.random() < 0.5 ? 0.9 : 1.1 // Зменшення або збільшення на 10%\r\n\t\t}\r\n\t\t// Зміна кількості місць з ймовірністю 10%\r\n\t\tif (Math.random() < 0.1) {\r\n\t\t\tmutatedRoom['number of seats'] += Math.random() < 0.5 ? -1 : 1 // Зменшення або збільшення на 1\r\n\t\t}\r\n\t\treturn mutatedRoom\r\n\t}\r\n\r\n\t// Генетичний алгоритм для пошуку найкращого номера\r\n\tconst geneticAlgorithm = (roomData, populationSize, generations) => {\r\n\t\tlet bestRoom = null\r\n\t\tlet bestFitness = -Infinity\r\n\r\n\t\t// Повторення для кожного покоління\r\n\t\tfor (let gen = 0; gen < generations; gen++) {\r\n\t\t\t// Випадково обираємо номери з поточної популяції та обчислюємо їх придатність\r\n\t\t\tfor (let i = 0; i < populationSize; i++) {\r\n\t\t\t\tconst randomRoom = roomData[Math.floor(Math.random() * roomData.length)]\r\n\t\t\t\tconst fitness = calculateFitness(randomRoom)\r\n\t\t\t\tif (fitness > bestFitness) {\r\n\t\t\t\t\tbestFitness = fitness\r\n\t\t\t\t\tbestRoom = randomRoom\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bestRoom\r\n\t}\r\n\r\n\t// Функція для зміни номера по натисканню кнопки\r\n\tconst changeRoom = () => {\r\n\t\tconst newRoom = geneticAlgorithm(roomData, 50, 3)\r\n\t\tsetBestRoom(newRoom)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>Найдешевший та найбільш просторий номер:</p>\r\n\t\t\t<button type='button' onClick={changeRoom}>\r\n\t\t\t\tЗмінити номер\r\n\t\t\t</button>\r\n\t\t\t{bestRoom && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<img src={'/img/' + bestRoom['file photo']} alt='' />\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tНазва: {bestRoom['nomers name']} {bestRoom.id}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tЦіна:{' '}\r\n\t\t\t\t\t\t<Price\r\n\t\t\t\t\t\t\tdepartureDate={props.departureDate}\r\n\t\t\t\t\t\t\tarrivalDate={props.arrivalDate}\r\n\t\t\t\t\t\t\tguest={props.guest}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>Кількість місць: {bestRoom['number of seats']}</p>\r\n\t\t\t\t\t{/* Додайте інші дані про номер, які вам потрібні */}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default HotelRoomPicker\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}