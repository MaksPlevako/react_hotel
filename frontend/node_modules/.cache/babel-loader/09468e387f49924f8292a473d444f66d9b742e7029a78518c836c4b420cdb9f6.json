{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\frontend\\\\src\\\\components\\\\alg.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Price from './price';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HotelRoomPicker(props) {\n  _s();\n  const [bestRoom, setBestRoom] = useState(null);\n  const [roomData, setRoomData] = useState([]);\n  useEffect(() => {\n    // Отримання даних про номери готелю\n    fetch('http://localhost:8080/nomers').then(res => res.json()).then(data => {\n      setRoomData(data);\n    }).catch(err => console.error(err));\n  }, []);\n  const {\n    guest\n  } = props;\n  useEffect(() => {\n    // Перевірка, чи дані про номери готелю завантажені\n\n    if (props.guest > 0) {\n      // Запуск генетичного алгоритму\n      const bestRoom = geneticAlgorithm(roomData, 50, 5);\n      setBestRoom(bestRoom);\n    }\n  }, [guest]);\n\n  // Функція придатності (fitness function)\n  const calculateFitness = room => {\n    return room['number of seats'];\n  };\n\n  // Генетичний алгоритм для пошуку найкращого номера\n  const geneticAlgorithm = (roomData, populationSize, generations) => {\n    let bestRoom = null;\n    let bestFitness = props.guest;\n    // Повторення для кожного покоління\n    for (let gen = 0; gen < generations; gen++) {\n      // Випадково обираємо номери з поточної популяції та обчислюємо їх придатність\n      for (let i = 0; i < populationSize; i++) {\n        const randomRoom = roomData[Math.floor(Math.random() * roomData.length)];\n        const fitness = calculateFitness(randomRoom);\n        if (fitness === bestFitness) {\n          bestFitness = fitness;\n          bestRoom = randomRoom;\n        }\n      }\n    }\n    return bestRoom;\n  };\n\n  // Функція для зміни номера по натисканню кнопки\n  const changeRoom = () => {\n    const newRoom = geneticAlgorithm(roomData, 50, 5);\n    setBestRoom(newRoom);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: changeRoom,\n      children: \"\\u0417\\u043C\\u0456\\u043D\\u0438\\u0442\\u0438 \\u043D\\u043E\\u043C\\u0435\\u0440\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this), bestRoom && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041D\\u0430\\u0437\\u0432\\u0430: \", bestRoom['nomers name'], \" \\u041D\\u043E\\u043C\\u0435\\u0440 \\u043A\\u0456\\u043C\\u043D\\u0430\\u0442\\u0438: \", bestRoom.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: '/img/' + bestRoom['file photo'],\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(Price, {\n          departureDate: props.departureDate,\n          arrivalDate: props.arrivalDate,\n          guest: props.guest,\n          price: bestRoom.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041A\\u0456\\u043B\\u044C\\u043A\\u0456\\u0441\\u0442\\u044C \\u043C\\u0456\\u0441\\u0446\\u044C: \", bestRoom['number of seats']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 3\n  }, this);\n}\n_s(HotelRoomPicker, \"azhx3fXwxbF7YYpqbPa1vH7/zIU=\");\n_c = HotelRoomPicker;\nvar _c;\n$RefreshReg$(_c, \"HotelRoomPicker\");","map":{"version":3,"names":["React","useState","useEffect","Price","jsxDEV","_jsxDEV","HotelRoomPicker","props","_s","bestRoom","setBestRoom","roomData","setRoomData","fetch","then","res","json","data","catch","err","console","error","guest","geneticAlgorithm","calculateFitness","room","populationSize","generations","bestFitness","gen","i","randomRoom","Math","floor","random","length","fitness","changeRoom","newRoom","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","src","alt","departureDate","arrivalDate","price","_c","$RefreshReg$"],"sources":["D:/project/frontend/src/components/alg.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Price from './price'\r\n\r\nexport default function HotelRoomPicker(props) {\r\n\tconst [bestRoom, setBestRoom] = useState(null)\r\n\tconst [roomData, setRoomData] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\t\t// Отримання даних про номери готелю\r\n\t\tfetch('http://localhost:8080/nomers')\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tsetRoomData(data)\r\n\t\t\t})\r\n\t\t\t.catch(err => console.error(err))\r\n\t}, [])\r\n\r\n\tconst { guest } = props\r\n\r\n\tuseEffect(() => {\r\n\t\t// Перевірка, чи дані про номери готелю завантажені\r\n\r\n\t\tif (props.guest > 0) {\r\n\t\t\t// Запуск генетичного алгоритму\r\n\t\t\tconst bestRoom = geneticAlgorithm(roomData, 50, 5)\r\n\t\t\tsetBestRoom(bestRoom)\r\n\t\t}\r\n\t}, [guest])\r\n\r\n\t// Функція придатності (fitness function)\r\n\tconst calculateFitness = room => {\r\n\t\treturn room['number of seats']\r\n\t}\r\n\r\n\t// Генетичний алгоритм для пошуку найкращого номера\r\n\tconst geneticAlgorithm = (roomData, populationSize, generations) => {\r\n\t\tlet bestRoom = null\r\n\t\tlet bestFitness = props.guest\r\n\t\t// Повторення для кожного покоління\r\n\t\tfor (let gen = 0; gen < generations; gen++) {\r\n\t\t\t// Випадково обираємо номери з поточної популяції та обчислюємо їх придатність\r\n\t\t\tfor (let i = 0; i < populationSize; i++) {\r\n\t\t\t\tconst randomRoom = roomData[Math.floor(Math.random() * roomData.length)]\r\n\t\t\t\tconst fitness = calculateFitness(randomRoom)\r\n\t\t\t\tif (fitness === bestFitness) {\r\n\t\t\t\t\tbestFitness = fitness\r\n\t\t\t\t\tbestRoom = randomRoom\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bestRoom\r\n\t}\r\n\r\n\t// Функція для зміни номера по натисканню кнопки\r\n\tconst changeRoom = () => {\r\n\t\tconst newRoom = geneticAlgorithm(roomData, 50, 5)\r\n\t\tsetBestRoom(newRoom)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button type='button' onClick={changeRoom}>\r\n\t\t\t\tЗмінити номер\r\n\t\t\t</button>\r\n\t\t\t{bestRoom && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tНазва: {bestRoom['nomers name']} Номер кімнати: {bestRoom.id}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<img src={'/img/' + bestRoom['file photo']} alt='' />\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<Price\r\n\t\t\t\t\t\t\tdepartureDate={props.departureDate}\r\n\t\t\t\t\t\t\tarrivalDate={props.arrivalDate}\r\n\t\t\t\t\t\t\tguest={props.guest}\r\n\t\t\t\t\t\t\tprice={bestRoom.price}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>Кількість місць: {bestRoom['number of seats']}</p>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}