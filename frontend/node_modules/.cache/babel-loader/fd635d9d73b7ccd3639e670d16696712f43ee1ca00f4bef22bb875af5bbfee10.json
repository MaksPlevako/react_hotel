{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\frontend\\\\src\\\\components\\\\alg.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect } from 'react'\n\n// // Кількість номерів у готелі\n// const numberOfRooms = 50\n\n// // Генерація випадкових номерів для готелю\n// const generateRandomRooms = () => {\n// \tconst rooms = []\n// \tfor (let i = 0; i < numberOfRooms; i++) {\n// \t\trooms.push(Math.floor(Math.random() * 1000) + 1) // Припустимо, що номери у готелі - цілі числа від 1 до 1000\n// \t}\n// \treturn rooms\n// }\n\n// // Оцінювання кімнати (функція придатності)\n// const evaluateRoom = (roomNumber, targetRoomNumber) => {\n// \treturn Math.abs(roomNumber - targetRoomNumber) // Оцінка базується на різниці між номером і цільовим номером\n// }\n\n// // Генетичний алгоритм\n// const geneticAlgorithm = (targetRoomNumber, populationSize, generations) => {\n// \tlet population = []\n\n// \t// Створення випадкової популяції\n// \tfor (let i = 0; i < populationSize; i++) {\n// \t\tpopulation.push(generateRandomRooms())\n// \t}\n\n// \t// Повторення для кількості поколінь\n// \tfor (let gen = 0; gen < generations; gen++) {\n// \t\t// Оцінка кожного члена популяції\n// \t\tconst fitnessScores = population.map(member => {\n// \t\t\treturn member.reduce(\n// \t\t\t\t(acc, roomNumber) => acc + evaluateRoom(roomNumber, targetRoomNumber),\n// \t\t\t\t0\n// \t\t\t)\n// \t\t})\n\n// \t\t// Знаходження найкращих особин\n// \t\tconst bestIndex = fitnessScores.indexOf(Math.min(...fitnessScores))\n// \t\tconst bestMember = population[bestIndex]\n\n// \t\t// \"Схрещування\" (комбінація) найкращих особин\n// \t\tconst newPopulation = [bestMember]\n// \t\tfor (let i = 1; i < populationSize; i++) {\n// \t\t\tconst parentA = population[Math.floor(Math.random() * populationSize)]\n// \t\t\tconst parentB = population[Math.floor(Math.random() * populationSize)]\n// \t\t\tconst child = parentA.map((gene, index) =>\n// \t\t\t\tMath.random() < 0.5 ? gene : parentB[index]\n// \t\t\t) // Випадковий вибір генів від батьків\n// \t\t\tnewPopulation.push(child)\n// \t\t}\n\n// \t\tpopulation = newPopulation\n// \t}\n\n// \t// Повертаємо найкращого знайденого номера\n// \treturn population.reduce(\n// \t\t(acc, member) => {\n// \t\t\tconst score = member.reduce(\n// \t\t\t\t(acc, roomNumber) => acc + evaluateRoom(roomNumber, targetRoomNumber),\n// \t\t\t\t0\n// \t\t\t)\n// \t\t\treturn score < acc.score ? { roomNumber: member[0], score } : acc\n// \t\t},\n// \t\t{ roomNumber: null, score: Infinity }\n// \t).roomNumber\n// }\n\n// const HotelRoomPicker = () => {\n// \t// const [data, setData] = useState()\n\n// \t// useEffect(() => {\n// \t// \tfetch('http://localhost:8080/nomers')\n// \t// \t\t.then(res => res.json())\n// \t// \t\t.then(data => {\n// \t// \t\t\tsetData(data)\n// \t// \t\t})\n// \t// \t\t.catch(err => console.log(err))\n// \t// }, [])\n// \tconst roomData = [\n// \t\t{ number: 101, category: 'одномісний', price: 50 },\n// \t\t{ number: 102, category: 'двомісний', price: 70 },\n// \t\t// інші дані про кімнати\n// \t]\n\n// \tconst [targetRoomNumber, setTargetRoomNumber] = useState(500) // Цільовий номер, який ми хочемо знайти\n// \tconst [bestRoomNumber, setBestRoomNumber] = useState(null)\n\n// \tuseEffect(() => {\n// \t\t// Підбір найкращого номера при монтажі компонента\n// \t\tconst bestRoom = geneticAlgorithm(roomData, targetRoomNumber, 100, 10)\n// \t\tsetBestRoomNumber(bestRoom)\n// \t}, [targetRoomNumber])\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<h2>Генетичний відбір номерів у готелі</h2>\n// \t\t\t<p>Цільовий номер: {targetRoomNumber}</p>\n// \t\t\t<p>Найдешевший номер: {bestRoomNumber}</p>\n// \t\t</div>\n// \t)\n// }\n\n// export default HotelRoomPicker\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Nomers() {\n  _s();\n  const [data, setData] = useState();\n  useEffect(() => {\n    fetch('http://localhost:8080/nomers').then(res => res.json()).then(data => {\n      setData(data);\n    }).catch(err => console.log(err));\n  }, []);\n  const nomers = data.map(nomer => nomer);\n  return nomers;\n}\n// Ваші дані про номери готелю\n_s(Nomers, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n_c = Nomers;\nconst roomData = [Nomers];\n\n// Генетичний алгоритм для пошуку найкращого номера\nconst geneticAlgorithm = (populationSize, generations) => {};\nconst HotelRoomPicker = () => {\n  _s2();\n  const [bestRoom, setBestRoom] = useState(null);\n  useEffect(() => {\n    // Запуск генетичного алгоритму під час монтажу компонента\n    const bestRoom = geneticAlgorithm(100, 10);\n    setBestRoom(bestRoom);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0413\\u0435\\u043D\\u0435\\u0442\\u0438\\u0447\\u043D\\u0438\\u0439 \\u0432\\u0456\\u0434\\u0431\\u0456\\u0440 \\u043D\\u043E\\u043C\\u0435\\u0440\\u0456\\u0432 \\u0443 \\u0433\\u043E\\u0442\\u0435\\u043B\\u0456\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u041D\\u0430\\u0439\\u0434\\u0435\\u0448\\u0435\\u0432\\u0448\\u0438\\u0439 \\u0442\\u0430 \\u043D\\u0430\\u0439\\u0431\\u0456\\u043B\\u044C\\u0448 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u0440\\u0438\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }, this), bestRoom && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041D\\u0430\\u0437\\u0432\\u0430: \", bestRoom['nomers name']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0426\\u0456\\u043D\\u0430: \", bestRoom.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041A\\u0456\\u043B\\u044C\\u043A\\u0456\\u0441\\u0442\\u044C \\u043C\\u0456\\u0441\\u0446\\u044C: \", bestRoom['number of seats']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 3\n  }, this);\n};\n_s2(HotelRoomPicker, \"EjzKTQgeVzcvgMCqf962VTkUPjA=\");\n_c2 = HotelRoomPicker;\nexport default HotelRoomPicker;\nvar _c, _c2;\n$RefreshReg$(_c, \"Nomers\");\n$RefreshReg$(_c2, \"HotelRoomPicker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Nomers","_s","data","setData","fetch","then","res","json","catch","err","console","log","nomers","map","nomer","_c","roomData","geneticAlgorithm","populationSize","generations","HotelRoomPicker","_s2","bestRoom","setBestRoom","children","fileName","_jsxFileName","lineNumber","columnNumber","price","_c2","$RefreshReg$"],"sources":["D:/project/frontend/src/components/alg.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react'\r\n\r\n// // Кількість номерів у готелі\r\n// const numberOfRooms = 50\r\n\r\n// // Генерація випадкових номерів для готелю\r\n// const generateRandomRooms = () => {\r\n// \tconst rooms = []\r\n// \tfor (let i = 0; i < numberOfRooms; i++) {\r\n// \t\trooms.push(Math.floor(Math.random() * 1000) + 1) // Припустимо, що номери у готелі - цілі числа від 1 до 1000\r\n// \t}\r\n// \treturn rooms\r\n// }\r\n\r\n// // Оцінювання кімнати (функція придатності)\r\n// const evaluateRoom = (roomNumber, targetRoomNumber) => {\r\n// \treturn Math.abs(roomNumber - targetRoomNumber) // Оцінка базується на різниці між номером і цільовим номером\r\n// }\r\n\r\n// // Генетичний алгоритм\r\n// const geneticAlgorithm = (targetRoomNumber, populationSize, generations) => {\r\n// \tlet population = []\r\n\r\n// \t// Створення випадкової популяції\r\n// \tfor (let i = 0; i < populationSize; i++) {\r\n// \t\tpopulation.push(generateRandomRooms())\r\n// \t}\r\n\r\n// \t// Повторення для кількості поколінь\r\n// \tfor (let gen = 0; gen < generations; gen++) {\r\n// \t\t// Оцінка кожного члена популяції\r\n// \t\tconst fitnessScores = population.map(member => {\r\n// \t\t\treturn member.reduce(\r\n// \t\t\t\t(acc, roomNumber) => acc + evaluateRoom(roomNumber, targetRoomNumber),\r\n// \t\t\t\t0\r\n// \t\t\t)\r\n// \t\t})\r\n\r\n// \t\t// Знаходження найкращих особин\r\n// \t\tconst bestIndex = fitnessScores.indexOf(Math.min(...fitnessScores))\r\n// \t\tconst bestMember = population[bestIndex]\r\n\r\n// \t\t// \"Схрещування\" (комбінація) найкращих особин\r\n// \t\tconst newPopulation = [bestMember]\r\n// \t\tfor (let i = 1; i < populationSize; i++) {\r\n// \t\t\tconst parentA = population[Math.floor(Math.random() * populationSize)]\r\n// \t\t\tconst parentB = population[Math.floor(Math.random() * populationSize)]\r\n// \t\t\tconst child = parentA.map((gene, index) =>\r\n// \t\t\t\tMath.random() < 0.5 ? gene : parentB[index]\r\n// \t\t\t) // Випадковий вибір генів від батьків\r\n// \t\t\tnewPopulation.push(child)\r\n// \t\t}\r\n\r\n// \t\tpopulation = newPopulation\r\n// \t}\r\n\r\n// \t// Повертаємо найкращого знайденого номера\r\n// \treturn population.reduce(\r\n// \t\t(acc, member) => {\r\n// \t\t\tconst score = member.reduce(\r\n// \t\t\t\t(acc, roomNumber) => acc + evaluateRoom(roomNumber, targetRoomNumber),\r\n// \t\t\t\t0\r\n// \t\t\t)\r\n// \t\t\treturn score < acc.score ? { roomNumber: member[0], score } : acc\r\n// \t\t},\r\n// \t\t{ roomNumber: null, score: Infinity }\r\n// \t).roomNumber\r\n// }\r\n\r\n// const HotelRoomPicker = () => {\r\n// \t// const [data, setData] = useState()\r\n\r\n// \t// useEffect(() => {\r\n// \t// \tfetch('http://localhost:8080/nomers')\r\n// \t// \t\t.then(res => res.json())\r\n// \t// \t\t.then(data => {\r\n// \t// \t\t\tsetData(data)\r\n// \t// \t\t})\r\n// \t// \t\t.catch(err => console.log(err))\r\n// \t// }, [])\r\n// \tconst roomData = [\r\n// \t\t{ number: 101, category: 'одномісний', price: 50 },\r\n// \t\t{ number: 102, category: 'двомісний', price: 70 },\r\n// \t\t// інші дані про кімнати\r\n// \t]\r\n\r\n// \tconst [targetRoomNumber, setTargetRoomNumber] = useState(500) // Цільовий номер, який ми хочемо знайти\r\n// \tconst [bestRoomNumber, setBestRoomNumber] = useState(null)\r\n\r\n// \tuseEffect(() => {\r\n// \t\t// Підбір найкращого номера при монтажі компонента\r\n// \t\tconst bestRoom = geneticAlgorithm(roomData, targetRoomNumber, 100, 10)\r\n// \t\tsetBestRoomNumber(bestRoom)\r\n// \t}, [targetRoomNumber])\r\n\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t<h2>Генетичний відбір номерів у готелі</h2>\r\n// \t\t\t<p>Цільовий номер: {targetRoomNumber}</p>\r\n// \t\t\t<p>Найдешевший номер: {bestRoomNumber}</p>\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// export default HotelRoomPicker\r\n\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nfunction Nomers() {\r\n\tconst [data, setData] = useState()\r\n\tuseEffect(() => {\r\n\t\tfetch('http://localhost:8080/nomers')\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tsetData(data)\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log(err))\r\n\t}, [])\r\n\tconst nomers = data.map(nomer => nomer)\r\n\treturn nomers\r\n}\r\n// Ваші дані про номери готелю\r\nconst roomData = [Nomers]\r\n\r\n// Генетичний алгоритм для пошуку найкращого номера\r\nconst geneticAlgorithm = (populationSize, generations) => {}\r\n\r\nconst HotelRoomPicker = () => {\r\n\tconst [bestRoom, setBestRoom] = useState(null)\r\n\r\n\tuseEffect(() => {\r\n\t\t// Запуск генетичного алгоритму під час монтажу компонента\r\n\t\tconst bestRoom = geneticAlgorithm(100, 10)\r\n\t\tsetBestRoom(bestRoom)\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Генетичний відбір номерів у готелі</h2>\r\n\t\t\t<p>Найдешевший та найбільш просторий номер:</p>\r\n\t\t\t{bestRoom && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Назва: {bestRoom['nomers name']}</p>\r\n\t\t\t\t\t<p>Ціна: {bestRoom.price}</p>\r\n\t\t\t\t\t<p>Кількість місць: {bestRoom['number of seats']}</p>\r\n\t\t\t\t\t{/* Додайте інші дані про номер, які вам потрібні */}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default HotelRoomPicker\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}