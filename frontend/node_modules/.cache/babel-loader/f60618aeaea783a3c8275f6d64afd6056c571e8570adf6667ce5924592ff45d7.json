{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\frontend\\\\src\\\\components\\\\alg.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react'\n\n// // function Nomers() {\n// // \tconst [data, setData] = useState([])\n// // \tuseEffect(() => {\n// // \t\tfetch('http://localhost:8080/nomers')\n// // \t\t\t.then(res => res.json())\n// // \t\t\t.then(data => {\n// // \t\t\t\tsetData(data)\n// // \t\t\t})\n// // \t\t\t.catch(err => console.log(err))\n// // \t}, [])\n\n// // \treturn data\n// // }\n\n// // Функція придатності (fitness function)\n\n// const calculateFitness = room => {\n// \treturn room.price / room['number of seats']\n// }\n\n// // Генетичний алгоритм для пошуку найкращого номера\n// const geneticAlgorithm = (roomData, populationSize, generations) => {\n// \t// Створення випадкової початкової популяції\n// \tlet population = []\n// \tfor (let i = 0; i < populationSize; i++) {\n// \t\tpopulation.push(roomData[Math.floor(Math.random() * roomData.length)])\n// \t}\n\n// \t// Повторення для кожного покоління\n// \tfor (let gen = 0; gen < generations; gen++) {\n// \t\t// Оцінка кожного номера у популяції\n// \t\tconst evaluatedPopulation = population.map(room => {\n// \t\t\treturn { room, fitness: calculateFitness(room) }\n// \t\t})\n\n// \t\t// Сортування популяції за значенням фітнес-функції (від найкращого до найгіршого)\n// \t\tevaluatedPopulation.sort((a, b) => b.fitness - a.fitness)\n\n// \t\t// Відбір та схрещування для створення нової популяції\n// \t\tconst selectedIndividuals = evaluatedPopulation.slice(0, populationSize / 2)\n// \t\tconst newPopulation = [...selectedIndividuals]\n// \t\tconsole.log(newPopulation)\n\n// \t\twhile (newPopulation.length < populationSize) {\n// \t\t\tconst parentA =\n// \t\t\t\tselectedIndividuals[\n// \t\t\t\t\tMath.floor(Math.random() * selectedIndividuals.length)\n// \t\t\t\t].room\n// \t\t\tconst parentB =\n// \t\t\t\tselectedIndividuals[\n// \t\t\t\t\tMath.floor(Math.random() * selectedIndividuals.length)\n// \t\t\t\t].room\n\n// \t\t\tconst child = {\n// \t\t\t\t'nomers name':\n// \t\t\t\t\tMath.random() < 0.5 ? parentA['nomers name'] : parentB['nomers name'],\n// \t\t\t\tprice: Math.random() < 0.5 ? parentA.price : parentB.price,\n// \t\t\t\t'number of seats':\n// \t\t\t\t\tMath.random() < 0.5\n// \t\t\t\t\t\t? parentA['number of seats']\n// \t\t\t\t\t\t: parentB['number of seats'],\n// \t\t\t\t// Додайте інші параметри номера, які вам потрібні\n// \t\t\t}\n\n// \t\t\tnewPopulation.push(child)\n// \t\t}\n\n// \t\tpopulation = newPopulation\n// \t}\n// \t// Повернення найкращого номера з кінцевої популяції\n// \treturn population.reduce(\n// \t\t(best, room) => {\n// \t\t\tconst fitness = calculateFitness(room)\n// \t\t\treturn fitness > best.fitness ? { room, fitness } : best\n// \t\t},\n// \t\t{ room: null, fitness: -Infinity }\n// \t).room\n// }\n\n// const HotelRoomPicker = () => {\n// \tconst [bestRoom, setBestRoom] = useState(null)\n// \tconst [roomData, setRoomData] = useState([])\n\n// \tuseEffect(() => {\n// \t\t// Отримання даних про номери готелю\n// \t\tfetch('http://localhost:8080/nomers')\n// \t\t\t.then(res => res.json())\n// \t\t\t.then(data => {\n// \t\t\t\tsetRoomData(data)\n// \t\t\t})\n// \t\t\t.catch(err => console.error(err))\n// \t}, [])\n\n// \tuseEffect(() => {\n// \t\t// Перевірка, чи дані про номери готелю завантажені\n// \t\tif (roomData.length > 0) {\n// \t\t\t// Запуск генетичного алгоритму\n// \t\t\tconst bestRoom = geneticAlgorithm(roomData, 10, 2)\n// \t\t\tconsole.log(bestRoom)\n// \t\t\tsetBestRoom(bestRoom)\n// \t\t\tconsole.log(bestRoom)\n// \t\t}\n// \t}, [roomData])\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<h2>Генетичний відбір номерів у готелі</h2>\n// \t\t\t<p>Найдешевший та найбільш просторий номер:</p>\n// \t\t\t{bestRoom && (\n// \t\t\t\t<div>\n// \t\t\t\t\t<p>Назва: {bestRoom['nomers name']}</p>\n// \t\t\t\t\t<p>Ціна: {bestRoom.price}</p>\n// \t\t\t\t\t<p>Кількість місць: {bestRoom['number of seats']}</p>\n// \t\t\t\t\t{/* Додайте інші дані про номер, які вам потрібні */}\n// \t\t\t\t</div>\n// \t\t\t)}\n// \t\t</div>\n// \t)\n// }\n\n// export default HotelRoomPicker\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HotelRoomPicker = () => {\n  _s();\n  const [bestRoom, setBestRoom] = useState(null);\n  const [roomData, setRoomData] = useState([]);\n  useEffect(() => {\n    // Отримання даних про номери готелю\n    fetch('http://localhost:8080/nomers').then(res => res.json()).then(data => {\n      setRoomData(data);\n    }).catch(err => console.error(err));\n  }, []);\n  useEffect(() => {\n    // Перевірка, чи дані про номери готелю завантажені\n    if (roomData.length > 0) {\n      // Запуск генетичного алгоритму\n      const bestRoom = geneticAlgorithm(roomData, 50, 3);\n      setBestRoom(bestRoom);\n    }\n  }, [roomData]);\n\n  // Функція придатності (fitness function)\n  const calculateFitness = room => {\n    return room['number of seats'] / room.price;\n  };\n\n  // Генетичний алгоритм для пошуку найкращого номера\n  const geneticAlgorithm = (roomData, populationSize, generations) => {\n    let bestRoom = null;\n    let bestFitness = -Infinity;\n\n    // Повторення для кожного покоління\n    for (let gen = 0; gen < generations; gen++) {\n      // Випадково обираємо номери з поточної популяції та обчислюємо їх придатність\n      for (let i = 0; i < populationSize; i++) {\n        const randomRoom = roomData[Math.floor(Math.random() * roomData.length)];\n        const fitness = calculateFitness(randomRoom);\n        if (fitness > bestFitness) {\n          bestFitness = fitness;\n          bestRoom = randomRoom;\n        }\n      }\n    }\n    return bestRoom;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0413\\u0435\\u043D\\u0435\\u0442\\u0438\\u0447\\u043D\\u0438\\u0439 \\u0432\\u0456\\u0434\\u0431\\u0456\\u0440 \\u043D\\u043E\\u043C\\u0435\\u0440\\u0456\\u0432 \\u0443 \\u0433\\u043E\\u0442\\u0435\\u043B\\u0456\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u041D\\u0430\\u0439\\u0434\\u0435\\u0448\\u0435\\u0432\\u0448\\u0438\\u0439 \\u0442\\u0430 \\u043D\\u0430\\u0439\\u0431\\u0456\\u043B\\u044C\\u0448 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u0440\\u0438\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 4\n    }, this), bestRoom && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: bestRoom.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041D\\u0430\\u0437\\u0432\\u0430: \", bestRoom['nomers name']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0426\\u0456\\u043D\\u0430: \", bestRoom.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041A\\u0456\\u043B\\u044C\\u043A\\u0456\\u0441\\u0442\\u044C \\u043C\\u0456\\u0441\\u0446\\u044C: \", bestRoom['number of seats']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 3\n  }, this);\n};\n_s(HotelRoomPicker, \"azhx3fXwxbF7YYpqbPa1vH7/zIU=\");\n_c = HotelRoomPicker;\nexport default HotelRoomPicker;\nvar _c;\n$RefreshReg$(_c, \"HotelRoomPicker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","HotelRoomPicker","_s","bestRoom","setBestRoom","roomData","setRoomData","fetch","then","res","json","data","catch","err","console","error","length","geneticAlgorithm","calculateFitness","room","price","populationSize","generations","bestFitness","Infinity","gen","i","randomRoom","Math","floor","random","fitness","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["D:/project/frontend/src/components/alg.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react'\r\n\r\n// // function Nomers() {\r\n// // \tconst [data, setData] = useState([])\r\n// // \tuseEffect(() => {\r\n// // \t\tfetch('http://localhost:8080/nomers')\r\n// // \t\t\t.then(res => res.json())\r\n// // \t\t\t.then(data => {\r\n// // \t\t\t\tsetData(data)\r\n// // \t\t\t})\r\n// // \t\t\t.catch(err => console.log(err))\r\n// // \t}, [])\r\n\r\n// // \treturn data\r\n// // }\r\n\r\n// // Функція придатності (fitness function)\r\n\r\n// const calculateFitness = room => {\r\n// \treturn room.price / room['number of seats']\r\n// }\r\n\r\n// // Генетичний алгоритм для пошуку найкращого номера\r\n// const geneticAlgorithm = (roomData, populationSize, generations) => {\r\n// \t// Створення випадкової початкової популяції\r\n// \tlet population = []\r\n// \tfor (let i = 0; i < populationSize; i++) {\r\n// \t\tpopulation.push(roomData[Math.floor(Math.random() * roomData.length)])\r\n// \t}\r\n\r\n// \t// Повторення для кожного покоління\r\n// \tfor (let gen = 0; gen < generations; gen++) {\r\n// \t\t// Оцінка кожного номера у популяції\r\n// \t\tconst evaluatedPopulation = population.map(room => {\r\n// \t\t\treturn { room, fitness: calculateFitness(room) }\r\n// \t\t})\r\n\r\n// \t\t// Сортування популяції за значенням фітнес-функції (від найкращого до найгіршого)\r\n// \t\tevaluatedPopulation.sort((a, b) => b.fitness - a.fitness)\r\n\r\n// \t\t// Відбір та схрещування для створення нової популяції\r\n// \t\tconst selectedIndividuals = evaluatedPopulation.slice(0, populationSize / 2)\r\n// \t\tconst newPopulation = [...selectedIndividuals]\r\n// \t\tconsole.log(newPopulation)\r\n\r\n// \t\twhile (newPopulation.length < populationSize) {\r\n// \t\t\tconst parentA =\r\n// \t\t\t\tselectedIndividuals[\r\n// \t\t\t\t\tMath.floor(Math.random() * selectedIndividuals.length)\r\n// \t\t\t\t].room\r\n// \t\t\tconst parentB =\r\n// \t\t\t\tselectedIndividuals[\r\n// \t\t\t\t\tMath.floor(Math.random() * selectedIndividuals.length)\r\n// \t\t\t\t].room\r\n\r\n// \t\t\tconst child = {\r\n// \t\t\t\t'nomers name':\r\n// \t\t\t\t\tMath.random() < 0.5 ? parentA['nomers name'] : parentB['nomers name'],\r\n// \t\t\t\tprice: Math.random() < 0.5 ? parentA.price : parentB.price,\r\n// \t\t\t\t'number of seats':\r\n// \t\t\t\t\tMath.random() < 0.5\r\n// \t\t\t\t\t\t? parentA['number of seats']\r\n// \t\t\t\t\t\t: parentB['number of seats'],\r\n// \t\t\t\t// Додайте інші параметри номера, які вам потрібні\r\n// \t\t\t}\r\n\r\n// \t\t\tnewPopulation.push(child)\r\n// \t\t}\r\n\r\n// \t\tpopulation = newPopulation\r\n// \t}\r\n// \t// Повернення найкращого номера з кінцевої популяції\r\n// \treturn population.reduce(\r\n// \t\t(best, room) => {\r\n// \t\t\tconst fitness = calculateFitness(room)\r\n// \t\t\treturn fitness > best.fitness ? { room, fitness } : best\r\n// \t\t},\r\n// \t\t{ room: null, fitness: -Infinity }\r\n// \t).room\r\n// }\r\n\r\n// const HotelRoomPicker = () => {\r\n// \tconst [bestRoom, setBestRoom] = useState(null)\r\n// \tconst [roomData, setRoomData] = useState([])\r\n\r\n// \tuseEffect(() => {\r\n// \t\t// Отримання даних про номери готелю\r\n// \t\tfetch('http://localhost:8080/nomers')\r\n// \t\t\t.then(res => res.json())\r\n// \t\t\t.then(data => {\r\n// \t\t\t\tsetRoomData(data)\r\n// \t\t\t})\r\n// \t\t\t.catch(err => console.error(err))\r\n// \t}, [])\r\n\r\n// \tuseEffect(() => {\r\n// \t\t// Перевірка, чи дані про номери готелю завантажені\r\n// \t\tif (roomData.length > 0) {\r\n// \t\t\t// Запуск генетичного алгоритму\r\n// \t\t\tconst bestRoom = geneticAlgorithm(roomData, 10, 2)\r\n// \t\t\tconsole.log(bestRoom)\r\n// \t\t\tsetBestRoom(bestRoom)\r\n// \t\t\tconsole.log(bestRoom)\r\n// \t\t}\r\n// \t}, [roomData])\r\n\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t<h2>Генетичний відбір номерів у готелі</h2>\r\n// \t\t\t<p>Найдешевший та найбільш просторий номер:</p>\r\n// \t\t\t{bestRoom && (\r\n// \t\t\t\t<div>\r\n// \t\t\t\t\t<p>Назва: {bestRoom['nomers name']}</p>\r\n// \t\t\t\t\t<p>Ціна: {bestRoom.price}</p>\r\n// \t\t\t\t\t<p>Кількість місць: {bestRoom['number of seats']}</p>\r\n// \t\t\t\t\t{/* Додайте інші дані про номер, які вам потрібні */}\r\n// \t\t\t\t</div>\r\n// \t\t\t)}\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// export default HotelRoomPicker\r\n\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nconst HotelRoomPicker = () => {\r\n\tconst [bestRoom, setBestRoom] = useState(null)\r\n\tconst [roomData, setRoomData] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\t\t// Отримання даних про номери готелю\r\n\t\tfetch('http://localhost:8080/nomers')\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tsetRoomData(data)\r\n\t\t\t})\r\n\t\t\t.catch(err => console.error(err))\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\t// Перевірка, чи дані про номери готелю завантажені\r\n\t\tif (roomData.length > 0) {\r\n\t\t\t// Запуск генетичного алгоритму\r\n\t\t\tconst bestRoom = geneticAlgorithm(roomData, 50, 3)\r\n\t\t\tsetBestRoom(bestRoom)\r\n\t\t}\r\n\t}, [roomData])\r\n\r\n\t// Функція придатності (fitness function)\r\n\tconst calculateFitness = room => {\r\n\t\treturn room['number of seats'] / room.price\r\n\t}\r\n\r\n\t// Генетичний алгоритм для пошуку найкращого номера\r\n\tconst geneticAlgorithm = (roomData, populationSize, generations) => {\r\n\t\tlet bestRoom = null\r\n\t\tlet bestFitness = -Infinity\r\n\r\n\t\t// Повторення для кожного покоління\r\n\t\tfor (let gen = 0; gen < generations; gen++) {\r\n\t\t\t// Випадково обираємо номери з поточної популяції та обчислюємо їх придатність\r\n\t\t\tfor (let i = 0; i < populationSize; i++) {\r\n\t\t\t\tconst randomRoom = roomData[Math.floor(Math.random() * roomData.length)]\r\n\t\t\t\tconst fitness = calculateFitness(randomRoom)\r\n\t\t\t\tif (fitness > bestFitness) {\r\n\t\t\t\t\tbestFitness = fitness\r\n\t\t\t\t\tbestRoom = randomRoom\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bestRoom\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Генетичний відбір номерів у готелі</h2>\r\n\t\t\t<p>Найдешевший та найбільш просторий номер:</p>\r\n\t\t\t{bestRoom && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>{bestRoom.id}</p>\r\n\t\t\t\t\t<p>Назва: {bestRoom['nomers name']}</p>\r\n\t\t\t\t\t<p>Ціна: {bestRoom.price}</p>\r\n\t\t\t\t\t<p>Кількість місць: {bestRoom['number of seats']}</p>\r\n\t\t\t\t\t{/* Додайте інші дані про номер, які вам потрібні */}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default HotelRoomPicker\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}