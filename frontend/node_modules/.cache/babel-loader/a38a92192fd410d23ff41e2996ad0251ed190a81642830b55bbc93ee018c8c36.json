{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\frontend\\\\src\\\\components\\\\alg.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Nomers() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:8080/nomers').then(res => res.json()).then(data => {\n      setData(data);\n    }).catch(err => console.log(err));\n  }, []);\n  return data;\n}\n\n// Функція придатності (fitness function)\n_s(Nomers, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = Nomers;\nconst calculateFitness = room => {\n  return room['number of seats'] / room.price;\n};\n\n// Генетичний алгоритм для пошуку найкращого номера\nconst geneticAlgorithm = (roomData, populationSize, generations) => {\n  // Створення випадкової початкової популяції\n  let population = [];\n  for (let i = 0; i < populationSize; i++) {\n    population.push(roomData[Math.floor(Math.random() * roomData.length)]);\n  }\n\n  // Повторення для кожного покоління\n  for (let gen = 0; gen < generations; gen++) {\n    // Оцінка кожного номера у популяції\n    const evaluatedPopulation = population.map(room => {\n      return {\n        room,\n        fitness: calculateFitness(room)\n      };\n    });\n\n    // Сортування популяції за значенням фітнес-функції (від найкращого до найгіршого)\n    evaluatedPopulation.sort((a, b) => b.fitness - a.fitness);\n\n    // Відбір та схрещування для створення нової популяції\n    const selectedIndividuals = evaluatedPopulation.slice(0, populationSize / 2);\n    const newPopulation = [...selectedIndividuals];\n    while (newPopulation.length < populationSize) {\n      const parentA = selectedIndividuals[Math.floor(Math.random() * selectedIndividuals.length)].room;\n      const parentB = selectedIndividuals[Math.floor(Math.random() * selectedIndividuals.length)].room;\n      const child = {\n        ...parentA,\n        ...parentB\n      };\n\n      // Застосування мутації\n      if (Math.random() < 0.1) {\n        child.price *= Math.random() < 0.5 ? 0.9 : 1.1;\n        child['number of seats'] += Math.random() < 0.5 ? -1 : 1;\n      }\n      newPopulation.push(child);\n    }\n    population = newPopulation;\n  }\n\n  // Повернення найкращого номера з кінцевої популяції\n  return population.reduce((best, room) => {\n    const fitness = calculateFitness(room);\n    return fitness > best.fitness ? {\n      room,\n      fitness\n    } : best;\n  }, {\n    room: null,\n    fitness: -Infinity\n  }).room;\n};\nconst HotelRoomPicker = () => {\n  _s2();\n  const [bestRoom, setBestRoom] = useState(null);\n  const roomData = Nomers(); // Отримання даних про номери готелю\n\n  useEffect(() => {\n    if (roomData.length > 0) {\n      // Запуск генетичного алгоритму при монтажі компонента\n      console.log(roomData);\n      const bestRoom = geneticAlgorithm(roomData, 100, 10);\n      console.log(bestRoom);\n      setBestRoom(bestRoom);\n      console.log(bestRoom);\n    }\n  }, [roomData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0413\\u0435\\u043D\\u0435\\u0442\\u0438\\u0447\\u043D\\u0438\\u0439 \\u0432\\u0456\\u0434\\u0431\\u0456\\u0440 \\u043D\\u043E\\u043C\\u0435\\u0440\\u0456\\u0432 \\u0443 \\u0433\\u043E\\u0442\\u0435\\u043B\\u0456\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u041D\\u0430\\u0439\\u0434\\u0435\\u0448\\u0435\\u0432\\u0448\\u0438\\u0439 \\u0442\\u0430 \\u043D\\u0430\\u0439\\u0431\\u0456\\u043B\\u044C\\u0448 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u0440\\u0438\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }, this), bestRoom && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041D\\u0430\\u0437\\u0432\\u0430: \", bestRoom['nomers name']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0426\\u0456\\u043D\\u0430: \", bestRoom.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041A\\u0456\\u043B\\u044C\\u043A\\u0456\\u0441\\u0442\\u044C \\u043C\\u0456\\u0441\\u0446\\u044C: \", bestRoom['number of seats']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 3\n  }, this);\n};\n_s2(HotelRoomPicker, \"EjzKTQgeVzcvgMCqf962VTkUPjA=\");\n_c2 = HotelRoomPicker;\nexport default HotelRoomPicker;\nvar _c, _c2;\n$RefreshReg$(_c, \"Nomers\");\n$RefreshReg$(_c2, \"HotelRoomPicker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Nomers","_s","data","setData","fetch","then","res","json","catch","err","console","log","_c","calculateFitness","room","price","geneticAlgorithm","roomData","populationSize","generations","population","i","push","Math","floor","random","length","gen","evaluatedPopulation","map","fitness","sort","a","b","selectedIndividuals","slice","newPopulation","parentA","parentB","child","reduce","best","Infinity","HotelRoomPicker","_s2","bestRoom","setBestRoom","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["D:/project/frontend/src/components/alg.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction Nomers() {\r\n\tconst [data, setData] = useState([])\r\n\tuseEffect(() => {\r\n\t\tfetch('http://localhost:8080/nomers')\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tsetData(data)\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log(err))\r\n\t}, [])\r\n\r\n\treturn data\r\n}\r\n\r\n// Функція придатності (fitness function)\r\n\r\nconst calculateFitness = room => {\r\n\treturn room['number of seats'] / room.price\r\n}\r\n\r\n// Генетичний алгоритм для пошуку найкращого номера\r\nconst geneticAlgorithm = (roomData, populationSize, generations) => {\r\n\t// Створення випадкової початкової популяції\r\n\tlet population = []\r\n\tfor (let i = 0; i < populationSize; i++) {\r\n\t\tpopulation.push(roomData[Math.floor(Math.random() * roomData.length)])\r\n\t}\r\n\r\n\t// Повторення для кожного покоління\r\n\tfor (let gen = 0; gen < generations; gen++) {\r\n\t\t// Оцінка кожного номера у популяції\r\n\t\tconst evaluatedPopulation = population.map(room => {\r\n\t\t\treturn { room, fitness: calculateFitness(room) }\r\n\t\t})\r\n\r\n\t\t// Сортування популяції за значенням фітнес-функції (від найкращого до найгіршого)\r\n\t\tevaluatedPopulation.sort((a, b) => b.fitness - a.fitness)\r\n\r\n\t\t// Відбір та схрещування для створення нової популяції\r\n\t\tconst selectedIndividuals = evaluatedPopulation.slice(0, populationSize / 2)\r\n\t\tconst newPopulation = [...selectedIndividuals]\r\n\r\n\t\twhile (newPopulation.length < populationSize) {\r\n\t\t\tconst parentA =\r\n\t\t\t\tselectedIndividuals[\r\n\t\t\t\t\tMath.floor(Math.random() * selectedIndividuals.length)\r\n\t\t\t\t].room\r\n\t\t\tconst parentB =\r\n\t\t\t\tselectedIndividuals[\r\n\t\t\t\t\tMath.floor(Math.random() * selectedIndividuals.length)\r\n\t\t\t\t].room\r\n\r\n\t\t\tconst child = {\r\n\t\t\t\t...parentA,\r\n\t\t\t\t...parentB,\r\n\t\t\t}\r\n\r\n\t\t\t// Застосування мутації\r\n\t\t\tif (Math.random() < 0.1) {\r\n\t\t\t\tchild.price *= Math.random() < 0.5 ? 0.9 : 1.1\r\n\t\t\t\tchild['number of seats'] += Math.random() < 0.5 ? -1 : 1\r\n\t\t\t}\r\n\r\n\t\t\tnewPopulation.push(child)\r\n\t\t}\r\n\r\n\t\tpopulation = newPopulation\r\n\t}\r\n\r\n\t// Повернення найкращого номера з кінцевої популяції\r\n\treturn population.reduce(\r\n\t\t(best, room) => {\r\n\t\t\tconst fitness = calculateFitness(room)\r\n\t\t\treturn fitness > best.fitness ? { room, fitness } : best\r\n\t\t},\r\n\t\t{ room: null, fitness: -Infinity }\r\n\t).room\r\n}\r\n\r\nconst HotelRoomPicker = () => {\r\n\tconst [bestRoom, setBestRoom] = useState(null)\r\n\tconst roomData = Nomers() // Отримання даних про номери готелю\r\n\r\n\tuseEffect(() => {\r\n\t\tif (roomData.length > 0) {\r\n\t\t\t// Запуск генетичного алгоритму при монтажі компонента\r\n\t\t\tconsole.log(roomData)\r\n\t\t\tconst bestRoom = geneticAlgorithm(roomData, 100, 10)\r\n\t\t\tconsole.log(bestRoom)\r\n\t\t\tsetBestRoom(bestRoom)\r\n\t\t\tconsole.log(bestRoom)\r\n\t\t}\r\n\t}, [roomData])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Генетичний відбір номерів у готелі</h2>\r\n\t\t\t<p>Найдешевший та найбільш просторий номер:</p>\r\n\t\t\t{bestRoom && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Назва: {bestRoom['nomers name']}</p>\r\n\t\t\t\t\t<p>Ціна: {bestRoom.price}</p>\r\n\t\t\t\t\t<p>Кількість місць: {bestRoom['number of seats']}</p>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default HotelRoomPicker\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}