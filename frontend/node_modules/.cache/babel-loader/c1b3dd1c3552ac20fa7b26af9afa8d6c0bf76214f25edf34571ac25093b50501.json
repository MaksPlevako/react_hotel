{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\frontend\\\\src\\\\components\\\\alg.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Serv() {\n  _s();\n  const [data, setData] = useEffect();\n  useEffect(() => {\n    fetch('http://localhost:8080/Hotel').then(res => res.json()).then(data => {\n      setData(data);\n    }).catch(err => console.log(err));\n  }, []);\n  return data;\n}\n_s(Serv, \"Yl8iSJRlN1FC3IadAxh7vUlfTjs=\");\n_c = Serv;\nServ();\n\n// Кількість номерів у готелі\nconst numberOfRooms = 50;\n\n// Генерація випадкових номерів для готелю\nconst generateRandomRooms = () => {\n  const rooms = [];\n  for (let i = 0; i < numberOfRooms; i++) {\n    rooms.push(Math.floor(Math.random() * 1000) + 1); // Припустимо, що номери у готелі - цілі числа від 1 до 1000\n  }\n  return rooms;\n};\n\n// Оцінювання кімнати (функція придатності)\nconst evaluateRoom = (roomNumber, targetRoomNumber) => {\n  return Math.abs(roomNumber - targetRoomNumber); // Оцінка базується на різниці між номером і цільовим номером\n};\n\n// Генетичний алгоритм\nconst geneticAlgorithm = (targetRoomNumber, populationSize, generations) => {\n  let population = [];\n\n  // Створення випадкової популяції\n  for (let i = 0; i < populationSize; i++) {\n    population.push(generateRandomRooms());\n  }\n\n  // Повторення для кількості поколінь\n  for (let gen = 0; gen < generations; gen++) {\n    // Оцінка кожного члена популяції\n    const fitnessScores = population.map(member => {\n      return member.reduce((acc, roomNumber) => acc + evaluateRoom(roomNumber, targetRoomNumber), 0);\n    });\n\n    // Знаходження найкращих особин\n    const bestIndex = fitnessScores.indexOf(Math.min(...fitnessScores));\n    const bestMember = population[bestIndex];\n\n    // \"Схрещування\" (комбінація) найкращих особин\n    const newPopulation = [bestMember];\n    for (let i = 1; i < populationSize; i++) {\n      const parentA = population[Math.floor(Math.random() * populationSize)];\n      const parentB = population[Math.floor(Math.random() * populationSize)];\n      const child = parentA.map((gene, index) => Math.random() < 0.5 ? gene : parentB[index]); // Випадковий вибір генів від батьків\n      newPopulation.push(child);\n    }\n    population = newPopulation;\n  }\n\n  // Повертаємо найкращого знайденого номера\n  return population.reduce((acc, member) => {\n    const score = member.reduce((acc, roomNumber) => acc + evaluateRoom(roomNumber, targetRoomNumber), 0);\n    return score < acc.score ? {\n      roomNumber: member[0],\n      score\n    } : acc;\n  }, {\n    roomNumber: null,\n    score: Infinity\n  }).roomNumber;\n};\nconst HotelRoomPicker = data => {\n  _s2();\n  const [targetRoomNumber, setTargetRoomNumber] = useState(500); // Цільовий номер, який ми хочемо знайти\n  const [bestRoomNumber, setBestRoomNumber] = useState(null);\n  useEffect(() => {\n    // Підбір найкращого номера при монтажі компонента\n    const bestRoom = geneticAlgorithm(targetRoomNumber, 100, 100);\n    setBestRoomNumber(bestRoom);\n  }, [targetRoomNumber]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0413\\u0435\\u043D\\u0435\\u0442\\u0438\\u0447\\u043D\\u0438\\u0439 \\u0432\\u0456\\u0434\\u0431\\u0456\\u0440 \\u043D\\u043E\\u043C\\u0435\\u0440\\u0456\\u0432 \\u0443 \\u0433\\u043E\\u0442\\u0435\\u043B\\u0456\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u0426\\u0456\\u043B\\u044C\\u043E\\u0432\\u0438\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440: \", targetRoomNumber]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u041D\\u0430\\u0439\\u0434\\u0435\\u0448\\u0435\\u0432\\u0448\\u0438\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440: \", bestRoomNumber]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 3\n  }, this);\n};\n_s2(HotelRoomPicker, \"/P+t0uEkDCcjX+RztiV/KOMtU/o=\");\n_c2 = HotelRoomPicker;\nexport default HotelRoomPicker;\nvar _c, _c2;\n$RefreshReg$(_c, \"Serv\");\n$RefreshReg$(_c2, \"HotelRoomPicker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Serv","_s","data","setData","fetch","then","res","json","catch","err","console","log","_c","numberOfRooms","generateRandomRooms","rooms","i","push","Math","floor","random","evaluateRoom","roomNumber","targetRoomNumber","abs","geneticAlgorithm","populationSize","generations","population","gen","fitnessScores","map","member","reduce","acc","bestIndex","indexOf","min","bestMember","newPopulation","parentA","parentB","child","gene","index","score","Infinity","HotelRoomPicker","_s2","setTargetRoomNumber","bestRoomNumber","setBestRoomNumber","bestRoom","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["D:/project/frontend/src/components/alg.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction Serv() {\r\n\tconst [data, setData] = useEffect()\r\n\tuseEffect(() => {\r\n\t\tfetch('http://localhost:8080/Hotel')\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tsetData(data)\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log(err))\r\n\t}, [])\r\n\treturn data\r\n}\r\nServ()\r\n\r\n// Кількість номерів у готелі\r\nconst numberOfRooms = 50\r\n\r\n// Генерація випадкових номерів для готелю\r\nconst generateRandomRooms = () => {\r\n\tconst rooms = []\r\n\tfor (let i = 0; i < numberOfRooms; i++) {\r\n\t\trooms.push(Math.floor(Math.random() * 1000) + 1) // Припустимо, що номери у готелі - цілі числа від 1 до 1000\r\n\t}\r\n\treturn rooms\r\n}\r\n\r\n// Оцінювання кімнати (функція придатності)\r\nconst evaluateRoom = (roomNumber, targetRoomNumber) => {\r\n\treturn Math.abs(roomNumber - targetRoomNumber) // Оцінка базується на різниці між номером і цільовим номером\r\n}\r\n\r\n// Генетичний алгоритм\r\nconst geneticAlgorithm = (targetRoomNumber, populationSize, generations) => {\r\n\tlet population = []\r\n\r\n\t// Створення випадкової популяції\r\n\tfor (let i = 0; i < populationSize; i++) {\r\n\t\tpopulation.push(generateRandomRooms())\r\n\t}\r\n\r\n\t// Повторення для кількості поколінь\r\n\tfor (let gen = 0; gen < generations; gen++) {\r\n\t\t// Оцінка кожного члена популяції\r\n\t\tconst fitnessScores = population.map(member => {\r\n\t\t\treturn member.reduce(\r\n\t\t\t\t(acc, roomNumber) => acc + evaluateRoom(roomNumber, targetRoomNumber),\r\n\t\t\t\t0\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\t// Знаходження найкращих особин\r\n\t\tconst bestIndex = fitnessScores.indexOf(Math.min(...fitnessScores))\r\n\t\tconst bestMember = population[bestIndex]\r\n\r\n\t\t// \"Схрещування\" (комбінація) найкращих особин\r\n\t\tconst newPopulation = [bestMember]\r\n\t\tfor (let i = 1; i < populationSize; i++) {\r\n\t\t\tconst parentA = population[Math.floor(Math.random() * populationSize)]\r\n\t\t\tconst parentB = population[Math.floor(Math.random() * populationSize)]\r\n\t\t\tconst child = parentA.map((gene, index) =>\r\n\t\t\t\tMath.random() < 0.5 ? gene : parentB[index]\r\n\t\t\t) // Випадковий вибір генів від батьків\r\n\t\t\tnewPopulation.push(child)\r\n\t\t}\r\n\r\n\t\tpopulation = newPopulation\r\n\t}\r\n\r\n\t// Повертаємо найкращого знайденого номера\r\n\treturn population.reduce(\r\n\t\t(acc, member) => {\r\n\t\t\tconst score = member.reduce(\r\n\t\t\t\t(acc, roomNumber) => acc + evaluateRoom(roomNumber, targetRoomNumber),\r\n\t\t\t\t0\r\n\t\t\t)\r\n\t\t\treturn score < acc.score ? { roomNumber: member[0], score } : acc\r\n\t\t},\r\n\t\t{ roomNumber: null, score: Infinity }\r\n\t).roomNumber\r\n}\r\n\r\nconst HotelRoomPicker = data => {\r\n\tconst [targetRoomNumber, setTargetRoomNumber] = useState(500) // Цільовий номер, який ми хочемо знайти\r\n\tconst [bestRoomNumber, setBestRoomNumber] = useState(null)\r\n\r\n\tuseEffect(() => {\r\n\t\t// Підбір найкращого номера при монтажі компонента\r\n\t\tconst bestRoom = geneticAlgorithm(targetRoomNumber, 100, 100)\r\n\t\tsetBestRoomNumber(bestRoom)\r\n\t}, [targetRoomNumber])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Генетичний відбір номерів у готелі</h2>\r\n\t\t\t<p>Цільовий номер: {targetRoomNumber}</p>\r\n\t\t\t<p>Найдешевший номер: {bestRoomNumber}</p>\r\n\t\t\t<p>{data}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default HotelRoomPicker\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}