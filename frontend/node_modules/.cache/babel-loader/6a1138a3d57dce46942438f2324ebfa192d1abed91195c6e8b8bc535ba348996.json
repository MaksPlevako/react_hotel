{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\frontend\\\\src\\\\components\\\\alg.js\";\nimport React, { useState, useEffect } from 'react';\n\n// function Nomers() {\n// \tconst [data, setData] = useState([])\n// \tuseEffect(() => {\n// \t\tfetch('http://localhost:8080/nomers')\n// \t\t\t.then(res => res.json())\n// \t\t\t.then(data => {\n// \t\t\t\tsetData(data)\n// \t\t\t})\n// \t\t\t.catch(err => console.log(err))\n// \t}, [])\n\n// \treturn data\n// }\n\n// Функція придатності (fitness function)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateFitness = room => {\n  return room.price / room['number of seats'];\n};\n\n// Генетичний алгоритм для пошуку найкращого номера\nconst geneticAlgorithm = (roomData, populationSize, generations) => {\n  var _s = $RefreshSig$();\n  // Створення випадкової початкової популяції\n  let population = [];\n  for (let i = 0; i < populationSize; i++) {\n    population.push(roomData[Math.floor(Math.random() * roomData.length)]);\n  }\n\n  // Повторення для кожного покоління\n  for (let gen = 0; gen < generations; gen++) {\n    // Оцінка кожного номера у популяції\n    const evaluatedPopulation = population.map(room => {\n      return {\n        room,\n        fitness: calculateFitness(room)\n      };\n    });\n\n    // Сортування популяції за значенням фітнес-функції (від найкращого до найгіршого)\n    evaluatedPopulation.sort((a, b) => b.fitness - a.fitness);\n\n    // Відбір та схрещування для створення нової популяції\n    const selectedIndividuals = evaluatedPopulation.slice(0, populationSize / 2);\n    const newPopulation = [...selectedIndividuals];\n    console.log(newPopulation);\n    while (newPopulation.length < populationSize) {\n      const parentA = selectedIndividuals[Math.floor(Math.random() * selectedIndividuals.length)].room;\n      const parentB = selectedIndividuals[Math.floor(Math.random() * selectedIndividuals.length)].room;\n      const child = {\n        'nomers name': Math.random() < 0.5 ? parentA['nomers name'] : parentB['nomers name'],\n        price: Math.random() < 0.5 ? parentA.price : parentB.price,\n        'number of seats': Math.random() < 0.5 ? parentA['number of seats'] : parentB['number of seats']\n        // Додайте інші параметри номера, які вам потрібні\n      };\n      newPopulation.push(child);\n    }\n    // Повернення найкращого номера з кінцевої популяції\n    return population.reduce((best, room) => {\n      const fitness = calculateFitness(room);\n      return fitness > best.fitness ? {\n        room,\n        fitness\n      } : best;\n    }, {\n      room: null,\n      fitness: -Infinity\n    }).room;\n  }\n  const HotelRoomPicker = () => {\n    _s();\n    const [bestRoom, setBestRoom] = useState(null);\n    const [roomData, setRoomData] = useState([]);\n    useEffect(() => {\n      // Отримання даних про номери готелю\n      fetch('http://localhost:8080/nomers').then(res => res.json()).then(data => {\n        setRoomData(data);\n      }).catch(err => console.error(err));\n    }, []);\n    useEffect(() => {\n      // Перевірка, чи дані про номери готелю завантажені\n      if (roomData.length > 0) {\n        // Запуск генетичного алгоритму\n        const bestRoom = geneticAlgorithm(roomData, 10, 2);\n        console.log(bestRoom);\n        setBestRoom(bestRoom);\n        console.log(bestRoom);\n      }\n    }, [roomData]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0413\\u0435\\u043D\\u0435\\u0442\\u0438\\u0447\\u043D\\u0438\\u0439 \\u0432\\u0456\\u0434\\u0431\\u0456\\u0440 \\u043D\\u043E\\u043C\\u0435\\u0440\\u0456\\u0432 \\u0443 \\u0433\\u043E\\u0442\\u0435\\u043B\\u0456\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u041D\\u0430\\u0439\\u0434\\u0435\\u0448\\u0435\\u0432\\u0448\\u0438\\u0439 \\u0442\\u0430 \\u043D\\u0430\\u0439\\u0431\\u0456\\u043B\\u044C\\u0448 \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u0440\\u0438\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), bestRoom && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041D\\u0430\\u0437\\u0432\\u0430: \", bestRoom['nomers name']]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0426\\u0456\\u043D\\u0430: \", bestRoom.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041A\\u0456\\u043B\\u044C\\u043A\\u0456\\u0441\\u0442\\u044C \\u043C\\u0456\\u0441\\u0446\\u044C: \", bestRoom['number of seats']]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this);\n  };\n  _s(HotelRoomPicker, \"azhx3fXwxbF7YYpqbPa1vH7/zIU=\");\n};\nexport default HotelRoomPicker;","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","calculateFitness","room","price","geneticAlgorithm","roomData","populationSize","generations","_s","$RefreshSig$","population","i","push","Math","floor","random","length","gen","evaluatedPopulation","map","fitness","sort","a","b","selectedIndividuals","slice","newPopulation","console","log","parentA","parentB","child","reduce","best","Infinity","HotelRoomPicker","bestRoom","setBestRoom","setRoomData","fetch","then","res","json","data","catch","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/project/frontend/src/components/alg.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\n// function Nomers() {\r\n// \tconst [data, setData] = useState([])\r\n// \tuseEffect(() => {\r\n// \t\tfetch('http://localhost:8080/nomers')\r\n// \t\t\t.then(res => res.json())\r\n// \t\t\t.then(data => {\r\n// \t\t\t\tsetData(data)\r\n// \t\t\t})\r\n// \t\t\t.catch(err => console.log(err))\r\n// \t}, [])\r\n\r\n// \treturn data\r\n// }\r\n\r\n// Функція придатності (fitness function)\r\n\r\nconst calculateFitness = room => {\r\n\treturn room.price / room['number of seats']\r\n}\r\n\r\n// Генетичний алгоритм для пошуку найкращого номера\r\nconst geneticAlgorithm = (roomData, populationSize, generations) => {\r\n\t// Створення випадкової початкової популяції\r\n\tlet population = []\r\n\tfor (let i = 0; i < populationSize; i++) {\r\n\t\tpopulation.push(roomData[Math.floor(Math.random() * roomData.length)])\r\n\t}\r\n\r\n\t// Повторення для кожного покоління\r\n\tfor (let gen = 0; gen < generations; gen++) {\r\n\t\t// Оцінка кожного номера у популяції\r\n\t\tconst evaluatedPopulation = population.map(room => {\r\n\t\t\treturn { room, fitness: calculateFitness(room) }\r\n\t\t})\r\n\r\n\t\t// Сортування популяції за значенням фітнес-функції (від найкращого до найгіршого)\r\n\t\tevaluatedPopulation.sort((a, b) => b.fitness - a.fitness)\r\n\r\n\t\t// Відбір та схрещування для створення нової популяції\r\n\t\tconst selectedIndividuals = evaluatedPopulation.slice(0, populationSize / 2)\r\n\t\tconst newPopulation = [...selectedIndividuals]\r\n\t\tconsole.log(newPopulation)\r\n\r\n\t\twhile (newPopulation.length < populationSize) {\r\n\t\t\tconst parentA =\r\n\t\t\t\tselectedIndividuals[\r\n\t\t\t\t\tMath.floor(Math.random() * selectedIndividuals.length)\r\n\t\t\t\t].room\r\n\t\t\tconst parentB =\r\n\t\t\t\tselectedIndividuals[\r\n\t\t\t\t\tMath.floor(Math.random() * selectedIndividuals.length)\r\n\t\t\t\t].room\r\n\r\n\t\t\tconst child = {\r\n\t\t\t\t'nomers name':\r\n\t\t\t\t\tMath.random() < 0.5 ? parentA['nomers name'] : parentB['nomers name'],\r\n\t\t\t\tprice: Math.random() < 0.5 ? parentA.price : parentB.price,\r\n\t\t\t\t'number of seats':\r\n\t\t\t\t\tMath.random() < 0.5\r\n\t\t\t\t\t\t? parentA['number of seats']\r\n\t\t\t\t\t\t: parentB['number of seats'],\r\n\t\t\t\t// Додайте інші параметри номера, які вам потрібні\r\n\t\t\t}\r\n\t\t\tnewPopulation.push(child)\r\n\t\t}\r\n\t\t// Повернення найкращого номера з кінцевої популяції\r\n\t\treturn population.reduce(\r\n\t\t\t(best, room) => {\r\n\t\t\t\tconst fitness = calculateFitness(room)\r\n\t\t\t\treturn fitness > best.fitness ? { room, fitness } : best\r\n\t\t\t},\r\n\t\t\t{ room: null, fitness: -Infinity }\r\n\t\t).room\r\n\t}\r\n\r\n\tconst HotelRoomPicker = () => {\r\n\t\tconst [bestRoom, setBestRoom] = useState(null)\r\n\t\tconst [roomData, setRoomData] = useState([])\r\n\r\n\t\tuseEffect(() => {\r\n\t\t\t// Отримання даних про номери готелю\r\n\t\t\tfetch('http://localhost:8080/nomers')\r\n\t\t\t\t.then(res => res.json())\r\n\t\t\t\t.then(data => {\r\n\t\t\t\t\tsetRoomData(data)\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => console.error(err))\r\n\t\t}, [])\r\n\r\n\t\tuseEffect(() => {\r\n\t\t\t// Перевірка, чи дані про номери готелю завантажені\r\n\t\t\tif (roomData.length > 0) {\r\n\t\t\t\t// Запуск генетичного алгоритму\r\n\t\t\t\tconst bestRoom = geneticAlgorithm(roomData, 10, 2)\r\n\t\t\t\tconsole.log(bestRoom)\r\n\t\t\t\tsetBestRoom(bestRoom)\r\n\t\t\t\tconsole.log(bestRoom)\r\n\t\t\t}\r\n\t\t}, [roomData])\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Генетичний відбір номерів у готелі</h2>\r\n\t\t\t\t<p>Найдешевший та найбільш просторий номер:</p>\r\n\t\t\t\t{bestRoom && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>Назва: {bestRoom['nomers name']}</p>\r\n\t\t\t\t\t\t<p>Ціна: {bestRoom.price}</p>\r\n\t\t\t\t\t\t<p>Кількість місць: {bestRoom['number of seats']}</p>\r\n\t\t\t\t\t\t{/* Додайте інші дані про номер, які вам потрібні */}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nexport default HotelRoomPicker\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}